{"version":3,"sources":["components/projects/AddProject.js","components/projects/ProjectList.js","components/navbar/NavBar.js","components/projects/EditProject.js","components/tasks/AddTask.js","components/projects/ProjectDetails.js","components/tasks/TaskDetails.js","components/auth/auth-service.js","components/auth/Signup.js","App.js","serviceWorker.js","index.js"],"names":["AddProject","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","event","preventDefault","title","state","description","axios","post","then","response","getData","setState","catch","error","console","log","handleChange","_event$target","target","name","value","defineProperty","_this2","react_default","a","createElement","onSubmit","type","onChange","e","Component","ProjectList","getAllProjects","get","responseFromApi","listOfProjects","data","style","width","float","map","project","key","_id","react_router_dom","to","concat","tasks","task","index","projects_AddProject","navbar","className","textDecoration","EditProject","put","theProject","getTheProject","history","push","handleChangeTitle","handleChangeDesc","AddTask","projectID","toggleForm","isShowing","showAddTaskForm","onClick","ProjectDetails","getSingleProject","params","match","id","err","renderEditForm","projects_EditProject","assign","deleteProject","delete","renderAddTaskForm","tasks_AddTask","length","TaskDetails","getTheTask","taskId","theTask","AuthService","signUp","username","password","service","create","baseURL","withCredentials","SignUp","newUser","getUser","errorMsg","message","App","getTheUser","userObj","loggedInUser","NavBar","react_router","exact","path","render","Signup","component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57353fca.chunk.js","sourcesContent":["// components/projects/AddProject.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass AddProject extends Component {\n  constructor(props){\n      super(props);\n      this.state = { \n        title: \"\", \n        description: \"\" \n      };\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const title = this.state.title;\n    const description = this.state.description;\n\n    axios.post(\"http://localhost:5000/api/projects\", { title, description })\n    .then(response => {\n        this.props.getData();\n        this.setState({title: \"\", description: \"\"});\n    })\n    .catch(error => console.log(error))\n  }\n\n  handleChange = (event) => {  \n      const {name, value} = event.target;\n      this.setState({[name]: value});\n  }\n\n  render(){\n    return(\n      <div>\n        <form onSubmit={this.handleFormSubmit}>\n          <label>Title:</label>\n          <input type=\"text\" name=\"title\" value={this.state.title} onChange={e => this.handleChange(e)}/>\n          <label>Description:</label>\n          <textarea name=\"description\" value={this.state.description} onChange={e => this.handleChange(e)} />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddProject;","// components/projects/ProjectList.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport AddProject from './AddProject';\n\nclass ProjectList extends Component {\n  constructor(){\n      super();\n      this.state = { listOfProjects: [] };\n  }\n\n  getAllProjects = () =>{\n    axios.get(`http://localhost:5000/api/projects`)\n    .then(responseFromApi => {\n      console.log(responseFromApi)\n      this.setState({\n        listOfProjects: responseFromApi.data\n      })\n    })\n  }\n\n  componentDidMount() {\n    this.getAllProjects();\n  }\n\n  render(){\n    return(\n      <div>\n        <div style={{width: '60%', float:\"left\"}}>\n          { this.state.listOfProjects.map( project => {\n            return (\n              <div key={project._id}>\n                <Link to={`/projects/${project._id}`}>\n                  <h3>{project.title}</h3>\n                </Link>\n                {/* <p style={{maxWidth: '400px'}} >{project.description} </p> */}\n                <ul>\n                  { project.tasks.map((task, index) => {\n                    return <li key={index}>{task.title}</li>\n                  }) }\n                </ul>  \n              </div>\n            )})\n          }\n        </div>\n        <div style={{width: '40%', float:\"right\"}}>\n            <AddProject getData={() => this.getAllProjects()}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ProjectList;","// components/navbar/Navbar.js\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst navbar = () => {\n  return (\n    <nav className=\"nav-style\">\n      <ul>\n        <li><Link to=\"/projects\" style={{ textDecoration: 'none' }}>Projects</Link></li>\n    </ul>\n    </nav>\n  )\n}\n\nexport default navbar;","// components/projects/EditProject.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass EditProject extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        title: this.props.theProject.title, \n        description: this.props.theProject.description\n    }\n  }\n\n    \n  handleFormSubmit = (event) => {\n    const title = this.state.title;\n    const description = this.state.description;\n\n    event.preventDefault();\n\n    axios.put(`http://localhost:5000/api/projects/${this.props.theProject._id}`, { title, description })\n    .then(() => {\n        this.props.getTheProject();\n        // after submitting the form, redirect to '/projects'\n        this.props.history.push('/projects');    \n    })\n    .catch( error => console.log(error) )\n  }\n\n  handleChangeTitle = (event) => {  \n    this.setState({\n      title: event.target.value\n    })\n  }\n\n  handleChangeDesc = (event) => {  \n    this.setState({\n      description: event.target.value\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <hr />\n        <h3>Edit form</h3>\n        <form onSubmit={this.handleFormSubmit}>\n          <label>Title:</label>\n          <input type=\"text\" name=\"title\" value={this.state.title} onChange={e => this.handleChangeTitle(e)}/>\n          <label>Description:</label>\n          <textarea name=\"description\" value={this.state.description} onChange={e => this.handleChangeDesc(e)} />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default EditProject;","// components/tasks/AddTask.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass AddTask extends Component {\n  constructor(props){\n      super(props);          //             will help us to toggle add task form   \n                            //                      |\n      this.state = { title: \"\", description: \"\", isShowing: false };\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const title = this.state.title;\n    const description = this.state.description;\n    const projectID = this.props.theProject._id; // <== we need to know to which project the created task belong, so we need to get its 'id'\n                                                // it has to be the 'id' because we are referencing project \n                                                // by its id in the task model on the server side ( project: {type: Schema.Types.ObjectId, ref: 'Project'})\n    \n    // { title, description, projectID } => this is 'req.body' that will be received on the server side in this route, \n    // so the names have to match\n    axios.post(\"http://localhost:5000/api/tasks\", { title, description, projectID })\n    .then(() => {\n          // after submitting the form, retrieve project one more time so the new task is displayed as well \n          //              |\n        this.props.getTheProject();\n        this.setState({title: \"\", description: \"\"});\n    })\n    .catch(error => console.log(error) )\n  }\n\n  handleChange = (event) => {  \n      const {name, value} = event.target;\n      this.setState({[name]: value});\n  }\n\n  toggleForm = () => {\n      if(!this.state.isShowing){\n          this.setState({isShowing: true});\n      } else {\n        this.setState({isShowing: false});\n      }\n  }\n\n  showAddTaskForm = () => {\n    if(this.state.isShowing){\n        return(\n            <div>\n                  <h3>Add Task</h3>\n                  <form onSubmit={this.handleFormSubmit}>\n                  <label>Title:</label>\n                  <input type=\"text\" name=\"title\" value={this.state.title} onChange={ e => this.handleChange(e)}/>\n                  <label>Description:</label>\n                  <textarea name=\"description\" value={this.state.description} onChange={ e => this.handleChange(e)} />\n                  \n                  <input type=\"submit\" value=\"Submit\" />\n                  </form>\n            </div>\n          )\n    }\n  }\n\n  render(){\n    return(\n      <div>\n            <hr />\n            <button onClick={() => this.toggleForm()}> Add task </button>\n            { this.showAddTaskForm() }\n      </div>\n    )\n  }\n}\n\nexport default AddTask;","// components/projects/ProjectDetails.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link, Redirect } from 'react-router-dom';\nimport EditProject from './EditProject';\nimport AddTask from '../tasks/AddTask';\n\n\nclass ProjectDetails extends Component {\n  constructor(props){\n      super(props);\n      this.state = {\n        title: '',\n        description: ''\n      };\n  }\n\n  componentDidMount(){\n    this.getSingleProject();\n  }\n\n  getSingleProject = () => {\n    const { params } = this.props.match;\n    axios.get(`http://localhost:5000/api/projects/${params.id}`)\n    .then(responseFromApi => {\n        const theProject = responseFromApi.data;\n        this.setState(theProject);\n    })\n    .catch(err => {\n        console.log(err)\n    })\n  }\n\n  renderEditForm = () => {\n    if(!this.state.title){\n      this.getSingleProject();\n    } else {\n    //                                                    {...props} => so we can have 'this.props.history' in Edit.js\n    //                                                                                          ^\n    //                                                                                          |\n      return <EditProject theProject={this.state} getTheProject={this.getSingleProject} {...this.props} />\n        \n    }\n  }\n\n  // DELETE PROJECT:\n  deleteProject = () => {\n    const { params } = this.props.match;\n    axios.delete(`http://localhost:5000/api/projects/${params.id}`)\n    .then(() =>{\n      this.props.history.push('/projects'); // !!!         \n    })\n    .catch((err)=>{\n        console.log(err)\n    })\n  }\n\n  renderAddTaskForm = () => {\n    if(!this.state.title){\n        this.getSingleProject();\n      } else {     \n                // pass the project and method getSingleProject() as a props down to AddTask component\n        return <AddTask theProject={this.state} getTheProject={this.getSingleProject} />\n      }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.title}</h1>\n        <p>{this.state.description}</p>\n        {/* show the task heading only if there are tasks */}\n        { this.state.tasks && this.state.tasks.length > 0 && <h3>Tasks </h3> }\n        {/* map through the array of tasks and... */}\n        { this.state.tasks && this.state.tasks.map((task, index) => {\n            return(\n                <div key={ index }>\n                {/* ... make each task's title a link that goes to the task details page */}\n                    <Link to={`/projects/${this.state._id}/tasks/${task._id}`}> \n                        { task.title }\n                    </Link>\n                </div>\n            )\n            \n          })\n        }\n        <div>{this.renderEditForm()} </div>\n        <button onClick={() => this.deleteProject()}>Delete project</button> {/* <== !!! */}\n        <br/>\n        <div>{this.renderAddTaskForm()} </div>\n        <br/><br/><br/><br/><br/>\n        <Link to={'/projects'}>Back to projects</Link>\n      </div>\n    )\n  }\n}\n\nexport default ProjectDetails;","// components/tasks/TaskDetails.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\n\nclass TaskDetails extends Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount(){\n    this.getTheTask();\n  }\n\n  getTheTask = () => {\n    const { params } = this.props.match;\n    axios.get(`http://localhost:5000/api/projects/${params.id}/tasks/${params.taskId}`)\n    .then( responseFromApi =>{\n      const theTask = responseFromApi.data;\n      this.setState(theTask);\n    })\n    .catch((err)=>{\n        console.log(err)\n    })\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>{this.state.title}</h1>\n        <p>{this.state.description}</p>\n      </div>\n    )\n  }\n}\n\nexport default TaskDetails;","// auth/auth-service.js\n\nimport axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: 'http://localhost:5000/api',\n      withCredentials: true\n    });\n  }\n\n  signUp = (username, password) => {\n    return this.service.post('/signup', { username, password })\n      .then(response => response.data)\n      // .catch(error => console.log(error))\n  }\n}\n\nexport default AuthService;","// auth/Signup.js\n\nimport React, { Component } from 'react';\nimport AuthService from './auth-service';\nimport { Link } from 'react-router-dom';\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      username: '',\n      password: '',\n      errorMsg: null\n    };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.signUp(username, password)\n      .then(newUser => {\n        this.setState({\n          username: \"\",\n          password: \"\",\n        });\n        this.props.getUser(newUser)\n      })\n      .catch(error => {\n        // console.log(`no dounut for you ${error}`, error.response.data)\n        this.setState({\n          errorMsg: `${error.response.data.message}`\n        })\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>{this.state.errorMsg}</h3>\n        <form onSubmit={this.handleFormSubmit}>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n\n          <input type=\"submit\" value=\"Sign Up\" />\n        </form>\n\n        <p>Already have account?\n          <Link to={\"/\"}> Login</Link>\n        </p>\n\n      </div>\n    )\n  }\n}\n\nexport default SignUp;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport ProjectList from './components/projects/ProjectList';\nimport NavBar from './components/navbar/NavBar';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport TaskDetails from './components/tasks/TaskDetails';\nimport SignUp from './components/auth/Signup';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loggedInUser: null\n    }\n  }\n\n  getTheUser= userObj => {\n    this.setState({\n      loggedInUser: userObj\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/signup\" render={() => <SignUp getUser={this.getTheUser}/>} />\n          <Route exact path=\"/projects\" component={ProjectList} />\n          <Route exact path=\"/projects/:id\" component={ProjectDetails} />\n          <Route exact path=\"/projects/:id/tasks/:taskId\" component={TaskDetails} />\n        </Switch>\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}